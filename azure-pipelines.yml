# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: Maven@3
  displayName: Maven Compile
  inputs:
    mavenPomFile: 'pom.xml'
    options: -B compile -DskipTests=true
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: false

- task: SonarCloudPrepare@1
  displayName: Prepare Sonar Cloud
  inputs:
    SonarCloud: 'Sonar Cloud'
    organization: 'nkbali'
    scannerMode: 'Other'

- task: Maven@3
  displayName: Sonar Analysis
  inputs:
    mavenPomFile: 'pom.xml'
    options: -B org.jacoco:jacoco-maven-plugin:prepare-agent verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    sqAnalysisEnabled: true

- task: SonarCloudPublish@1
  displayName: Sonar Publish
  inputs:
    pollingTimeoutSec: '300'

- task: PowerShell@2
  displayName: Check Quality Gate
  inputs:
    targetType: 'inline'
    script: |
      Write-Host $(SonarToken)
      [xml]$pomXml=Get-Content .\pom.xml
      $token=$pomXml.project.properties.sonarToken
      $tokenBytes = [Text.Encoding]::Unicode.GetBytes($token)
      Write-Host $token
      $base64 = [System.Convert]::ToBase64String($tokenBytes)
      $basicAuth = [string]::Format("Basic {0}", $base64)
      $result = Invoke-RestMethod -Method Get -Uri https://sonarcloud.io/api/qualitygates/project_status?projectKey=com.demo:invoice
      $result | ConvertTo-Json | Write-Host
      if ($result.projectStatus.status -eq "OK") {
      Write-Host "Quality Gate Succeeded"
      }else{
      throw "Quality gate failed"
      }

- task: AzureCLI@2
  displayName: Print Source Directory Contents
  inputs:
    azureSubscription: 'Visual Studio Enterprise with MSDN(39dc3320-048d-431c-af14-97c7c1b23ed7)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: 'ls -ltrR $(build.sourcesdirectory)'

- task: CopyFiles@2
  displayName: Copy Jar File
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: 'target/*.jar'
    TargetFolder: '$(build.artifactstagingdirectory)'


- task: CopyFiles@2
  displayName: Copy Docker File
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: 'Dockerfile'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: AzureCLI@2
  displayName: Print Target Directory Contents
  inputs:
    azureSubscription: 'Visual Studio Enterprise with MSDN(39dc3320-048d-431c-af14-97c7c1b23ed7)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: 'ls -ltrR $(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'


- task: Docker@2
  displayName: Docker Build and Push
  inputs:
    containerRegistry: 'Azure Openshift Docker Registry'
    command: 'buildAndPush'
    Dockerfile: 'Dockerfile'
    tags: |
      $(Build.BuildNumber)
      latest



